
DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003384  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800353c  0800353c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800353c  0800353c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800353c  0800353c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000017c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008089  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001884  00000000  00000000  000280c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00029950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000628  00000000  00000000  0002a040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7fb  00000000  00000000  0002a668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000925a  00000000  00000000  00049e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc0b7  00000000  00000000  000530bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010f174  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001aa8  00000000  00000000  0010f1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080034f4 	.word	0x080034f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080034f4 	.word	0x080034f4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa48 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f810 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8f6 	bl	80003c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f8d6 	bl	8000388 <MX_DMA_Init>
  MX_ADC1_Init();
 80001dc:	f000 f864 	bl	80002a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_samp, SAMPLES);
 80001e0:	2264      	movs	r2, #100	; 0x64
 80001e2:	4902      	ldr	r1, [pc, #8]	; (80001ec <main+0x24>)
 80001e4:	4802      	ldr	r0, [pc, #8]	; (80001f0 <main+0x28>)
 80001e6:	f000 fc3d 	bl	8000a64 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ea:	e7fe      	b.n	80001ea <main+0x22>
 80001ec:	200000bc 	.word	0x200000bc
 80001f0:	20000028 	.word	0x20000028

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b096      	sub	sp, #88	; 0x58
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f003 f96e 	bl	80034e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 031c 	add.w	r3, r7, #28
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	463b      	mov	r3, r7
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]
 8000226:	615a      	str	r2, [r3, #20]
 8000228:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000236:	2302      	movs	r3, #2
 8000238:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023a:	2300      	movs	r3, #0
 800023c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800023e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000242:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000248:	4618      	mov	r0, r3
 800024a:	f001 fdcd 	bl	8001de8 <HAL_RCC_OscConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000254:	f000 f902 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000258:	230f      	movs	r3, #15
 800025a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025c:	2300      	movs	r3, #0
 800025e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026c:	f107 031c 	add.w	r3, r7, #28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fdf6 	bl	8002e64 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800027e:	f000 f8ed 	bl	800045c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000282:	2380      	movs	r3, #128	; 0x80
 8000284:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800028a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028c:	463b      	mov	r3, r7
 800028e:	4618      	mov	r0, r3
 8000290:	f002 ffce 	bl	8003230 <HAL_RCCEx_PeriphCLKConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800029a:	f000 f8df 	bl	800045c <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3758      	adds	r7, #88	; 0x58
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ae:	f107 031c 	add.w	r3, r7, #28
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]
 80002c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ca:	4b2e      	ldr	r3, [pc, #184]	; (8000384 <MX_ADC1_Init+0xdc>)
 80002cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002d2:	4b2c      	ldr	r3, [pc, #176]	; (8000384 <MX_ADC1_Init+0xdc>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002d8:	4b2a      	ldr	r3, [pc, #168]	; (8000384 <MX_ADC1_Init+0xdc>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002de:	4b29      	ldr	r3, [pc, #164]	; (8000384 <MX_ADC1_Init+0xdc>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002e4:	4b27      	ldr	r3, [pc, #156]	; (8000384 <MX_ADC1_Init+0xdc>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ea:	4b26      	ldr	r3, [pc, #152]	; (8000384 <MX_ADC1_Init+0xdc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <MX_ADC1_Init+0xdc>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f8:	4b22      	ldr	r3, [pc, #136]	; (8000384 <MX_ADC1_Init+0xdc>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <MX_ADC1_Init+0xdc>)
 8000300:	2200      	movs	r2, #0
 8000302:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000304:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <MX_ADC1_Init+0xdc>)
 8000306:	2201      	movs	r2, #1
 8000308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800030a:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <MX_ADC1_Init+0xdc>)
 800030c:	2201      	movs	r2, #1
 800030e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000312:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <MX_ADC1_Init+0xdc>)
 8000314:	2204      	movs	r2, #4
 8000316:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_ADC1_Init+0xdc>)
 800031a:	2200      	movs	r2, #0
 800031c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <MX_ADC1_Init+0xdc>)
 8000320:	2200      	movs	r2, #0
 8000322:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000324:	4817      	ldr	r0, [pc, #92]	; (8000384 <MX_ADC1_Init+0xdc>)
 8000326:	f000 fa0b 	bl	8000740 <HAL_ADC_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000330:	f000 f894 	bl	800045c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000334:	2300      	movs	r3, #0
 8000336:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000338:	f107 031c 	add.w	r3, r7, #28
 800033c:	4619      	mov	r1, r3
 800033e:	4811      	ldr	r0, [pc, #68]	; (8000384 <MX_ADC1_Init+0xdc>)
 8000340:	f000 ff2a 	bl	8001198 <HAL_ADCEx_MultiModeConfigChannel>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800034a:	f000 f887 	bl	800045c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800034e:	2301      	movs	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000352:	2301      	movs	r3, #1
 8000354:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	4806      	ldr	r0, [pc, #24]	; (8000384 <MX_ADC1_Init+0xdc>)
 800036c:	f000 fc54 	bl	8000c18 <HAL_ADC_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000376:	f000 f871 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	3728      	adds	r7, #40	; 0x28
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028

08000388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_DMA_Init+0x38>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <MX_DMA_Init+0x38>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_DMA_Init+0x38>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2100      	movs	r1, #0
 80003aa:	200b      	movs	r0, #11
 80003ac:	f001 f9c5 	bl	800173a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003b0:	200b      	movs	r0, #11
 80003b2:	f001 f9de 	bl	8001772 <HAL_NVIC_EnableIRQ>

}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a10      	ldr	r2, [pc, #64]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e2:	6153      	str	r3, [r2, #20]
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_GPIO_Init+0x5c>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2120      	movs	r1, #32
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f8:	f001 fcde 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003fc:	2320      	movs	r3, #32
 80003fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	4619      	mov	r1, r3
 8000410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000414:	f001 fb5e 	bl	8001ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000

08000424 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, Toggle_LED, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	2120      	movs	r1, #32
 8000430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000434:	f001 fcc0 	bl	8001db8 <HAL_GPIO_WritePin>
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, Toggle_LED, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2120      	movs	r1, #32
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f001 fcb2 	bl	8001db8 <HAL_GPIO_WritePin>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	e7fe      	b.n	8000464 <Error_Handler+0x8>
	...

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <HAL_MspInit+0x44>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_MspInit+0x44>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <HAL_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a08      	ldr	r2, [pc, #32]	; (80004ac <HAL_MspInit+0x44>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_MspInit+0x44>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	; 0x28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004d0:	d14c      	bne.n	800056c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004d2:	4b28      	ldr	r3, [pc, #160]	; (8000574 <HAL_ADC_MspInit+0xc4>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a27      	ldr	r2, [pc, #156]	; (8000574 <HAL_ADC_MspInit+0xc4>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b25      	ldr	r3, [pc, #148]	; (8000574 <HAL_ADC_MspInit+0xc4>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <HAL_ADC_MspInit+0xc4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a21      	ldr	r2, [pc, #132]	; (8000574 <HAL_ADC_MspInit+0xc4>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <HAL_ADC_MspInit+0xc4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000506:	2303      	movs	r3, #3
 8000508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	4619      	mov	r1, r3
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f001 fadc 	bl	8001ad4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <HAL_ADC_MspInit+0xcc>)
 8000520:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 8000536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800053a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 800053e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000542:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 8000546:	2220      	movs	r2, #32
 8000548:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000550:	4809      	ldr	r0, [pc, #36]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 8000552:	f001 f928 	bl	80017a6 <HAL_DMA_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800055c:	f7ff ff7e 	bl	800045c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a05      	ldr	r2, [pc, #20]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 8000564:	639a      	str	r2, [r3, #56]	; 0x38
 8000566:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_ADC_MspInit+0xc8>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800056c:	bf00      	nop
 800056e:	3728      	adds	r7, #40	; 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	20000078 	.word	0x20000078
 800057c:	40020008 	.word	0x40020008

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 f88e 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <DMA1_Channel1_IRQHandler+0x10>)
 80005da:	f001 f98a 	bl	80018f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000078 	.word	0x20000078

080005e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <SystemInit+0x20>)
 80005ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <SystemInit+0x20>)
 80005f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800060c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000644 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000610:	f7ff ffea 	bl	80005e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <LoopForever+0xe>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063a:	f002 ff2f 	bl	800349c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800063e:	f7ff fdc3 	bl	80001c8 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000644:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000650:	08003544 	.word	0x08003544
  ldr r2, =_sbss
 8000654:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000658:	20000188 	.word	0x20000188

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>
	...

08000660 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HAL_Init+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_Init+0x28>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f001 f857 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	200f      	movs	r0, #15
 8000678:	f000 f808 	bl	800068c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067c:	f7ff fef4 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_InitTick+0x54>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x58>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f86f 	bl	800178e <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00e      	b.n	80006d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d80a      	bhi.n	80006d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f001 f837 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_InitTick+0x5c>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_IncTick+0x20>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_IncTick+0x24>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_IncTick+0x24>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008
 8000710:	20000184 	.word	0x20000184

08000714 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;  
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <HAL_GetTick+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000184 	.word	0x20000184

0800072c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09a      	sub	sp, #104	; 0x68
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000748:	2300      	movs	r3, #0
 800074a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800074e:	2300      	movs	r3, #0
 8000750:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d101      	bne.n	8000760 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e172      	b.n	8000a46 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	2b00      	cmp	r3, #0
 8000770:	d176      	bne.n	8000860 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	2b00      	cmp	r3, #0
 8000778:	d152      	bne.n	8000820 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff fe8b 	bl	80004b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d13b      	bne.n	8000820 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 fe85 	bl	80014b8 <ADC_Disable>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 0310 	and.w	r3, r3, #16
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d12f      	bne.n	8000820 <HAL_ADC_Init+0xe0>
 80007c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d12b      	bne.n	8000820 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007d0:	f023 0302 	bic.w	r3, r3, #2
 80007d4:	f043 0202 	orr.w	r2, r3, #2
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80007ea:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007fa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007fc:	4b94      	ldr	r3, [pc, #592]	; (8000a50 <HAL_ADC_Init+0x310>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a94      	ldr	r2, [pc, #592]	; (8000a54 <HAL_ADC_Init+0x314>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	0c9a      	lsrs	r2, r3, #18
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000812:	e002      	b.n	800081a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3b01      	subs	r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f9      	bne.n	8000814 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d007      	beq.n	800083e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800083c:	d110      	bne.n	8000860 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f023 0312 	bic.w	r3, r3, #18
 8000846:	f043 0210 	orr.w	r2, r3, #16
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f043 0201 	orr.w	r2, r3, #1
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f003 0310 	and.w	r3, r3, #16
 8000868:	2b00      	cmp	r3, #0
 800086a:	f040 80df 	bne.w	8000a2c <HAL_ADC_Init+0x2ec>
 800086e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000872:	2b00      	cmp	r3, #0
 8000874:	f040 80da 	bne.w	8000a2c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000882:	2b00      	cmp	r3, #0
 8000884:	f040 80d2 	bne.w	8000a2c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000890:	f043 0202 	orr.w	r2, r3, #2
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000898:	4b6f      	ldr	r3, [pc, #444]	; (8000a58 <HAL_ADC_Init+0x318>)
 800089a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008a4:	d102      	bne.n	80008ac <HAL_ADC_Init+0x16c>
 80008a6:	4b6d      	ldr	r3, [pc, #436]	; (8000a5c <HAL_ADC_Init+0x31c>)
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e002      	b.n	80008b2 <HAL_ADC_Init+0x172>
 80008ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008b0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f003 0303 	and.w	r3, r3, #3
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d108      	bne.n	80008d2 <HAL_ADC_Init+0x192>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d101      	bne.n	80008d2 <HAL_ADC_Init+0x192>
 80008ce:	2301      	movs	r3, #1
 80008d0:	e000      	b.n	80008d4 <HAL_ADC_Init+0x194>
 80008d2:	2300      	movs	r3, #0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d11c      	bne.n	8000912 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80008d8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d010      	beq.n	8000900 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d107      	bne.n	80008fa <HAL_ADC_Init+0x1ba>
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d101      	bne.n	80008fa <HAL_ADC_Init+0x1ba>
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <HAL_ADC_Init+0x1bc>
 80008fa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d108      	bne.n	8000912 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	431a      	orrs	r2, r3
 800090e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000910:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7e5b      	ldrb	r3, [r3, #25]
 8000916:	035b      	lsls	r3, r3, #13
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800091c:	2a01      	cmp	r2, #1
 800091e:	d002      	beq.n	8000926 <HAL_ADC_Init+0x1e6>
 8000920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000924:	e000      	b.n	8000928 <HAL_ADC_Init+0x1e8>
 8000926:	2200      	movs	r2, #0
 8000928:	431a      	orrs	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	431a      	orrs	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	4313      	orrs	r3, r2
 8000936:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000938:	4313      	orrs	r3, r2
 800093a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d11b      	bne.n	800097e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7e5b      	ldrb	r3, [r3, #25]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d109      	bne.n	8000962 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000952:	3b01      	subs	r3, #1
 8000954:	045a      	lsls	r2, r3, #17
 8000956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000958:	4313      	orrs	r3, r2
 800095a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800095e:	663b      	str	r3, [r7, #96]	; 0x60
 8000960:	e00d      	b.n	800097e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800096a:	f043 0220 	orr.w	r2, r3, #32
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f043 0201 	orr.w	r2, r3, #1
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000982:	2b01      	cmp	r3, #1
 8000984:	d007      	beq.n	8000996 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098e:	4313      	orrs	r3, r2
 8000990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000992:	4313      	orrs	r3, r2
 8000994:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f003 030c 	and.w	r3, r3, #12
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d114      	bne.n	80009ce <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	6812      	ldr	r2, [r2, #0]
 80009ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009b2:	f023 0302 	bic.w	r3, r3, #2
 80009b6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7e1b      	ldrb	r3, [r3, #24]
 80009bc:	039a      	lsls	r2, r3, #14
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4313      	orrs	r3, r2
 80009c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80009ca:	4313      	orrs	r3, r2
 80009cc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <HAL_ADC_Init+0x320>)
 80009d6:	4013      	ands	r3, r2
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	6812      	ldr	r2, [r2, #0]
 80009dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80009de:	430b      	orrs	r3, r1
 80009e0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d10c      	bne.n	8000a04 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	f023 010f 	bic.w	r1, r3, #15
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
 8000a02:	e007      	b.n	8000a14 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f022 020f 	bic.w	r2, r2, #15
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f023 0303 	bic.w	r3, r3, #3
 8000a22:	f043 0201 	orr.w	r2, r3, #1
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	641a      	str	r2, [r3, #64]	; 0x40
 8000a2a:	e00a      	b.n	8000a42 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f023 0312 	bic.w	r3, r3, #18
 8000a34:	f043 0210 	orr.w	r2, r3, #16
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000a42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3768      	adds	r7, #104	; 0x68
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000000 	.word	0x20000000
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	50000300 	.word	0x50000300
 8000a5c:	50000100 	.word	0x50000100
 8000a60:	fff0c007 	.word	0xfff0c007

08000a64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 80b9 	bne.w	8000bf6 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d101      	bne.n	8000a92 <HAL_ADC_Start_DMA+0x2e>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e0b4      	b.n	8000bfc <HAL_ADC_Start_DMA+0x198>
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2201      	movs	r2, #1
 8000a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000a9a:	4b5a      	ldr	r3, [pc, #360]	; (8000c04 <HAL_ADC_Start_DMA+0x1a0>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	f003 031f 	and.w	r3, r3, #31
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f040 80a0 	bne.w	8000be8 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f000 fca1 	bl	80013f0 <ADC_Enable>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f040 8092 	bne.w	8000bde <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ac2:	f023 0301 	bic.w	r3, r3, #1
 8000ac6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ace:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <HAL_ADC_Start_DMA+0x1a0>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f003 031f 	and.w	r3, r3, #31
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d004      	beq.n	8000ae4 <HAL_ADC_Start_DMA+0x80>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ae2:	d115      	bne.n	8000b10 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d027      	beq.n	8000b4e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000b0e:	e01e      	b.n	8000b4e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b24:	d004      	beq.n	8000b30 <HAL_ADC_Start_DMA+0xcc>
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a37      	ldr	r2, [pc, #220]	; (8000c08 <HAL_ADC_Start_DMA+0x1a4>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d10e      	bne.n	8000b4e <HAL_ADC_Start_DMA+0xea>
 8000b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d007      	beq.n	8000b4e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b5a:	d106      	bne.n	8000b6a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b60:	f023 0206 	bic.w	r2, r3, #6
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	645a      	str	r2, [r3, #68]	; 0x44
 8000b68:	e002      	b.n	8000b70 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b7c:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <HAL_ADC_Start_DMA+0x1a8>)
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <HAL_ADC_Start_DMA+0x1ac>)
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b8c:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <HAL_ADC_Start_DMA+0x1b0>)
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	221c      	movs	r2, #28
 8000b96:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 0210 	orr.w	r2, r2, #16
 8000ba6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0201 	orr.w	r2, r2, #1
 8000bb6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3340      	adds	r3, #64	; 0x40
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f000 fe34 	bl	8001834 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0204 	orr.w	r2, r2, #4
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	e00d      	b.n	8000bfa <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000be6:	e008      	b.n	8000bfa <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000bf4:	e001      	b.n	8000bfa <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	50000300 	.word	0x50000300
 8000c08:	50000100 	.word	0x50000100
 8000c0c:	08001325 	.word	0x08001325
 8000c10:	0800139f 	.word	0x0800139f
 8000c14:	080013bb 	.word	0x080013bb

08000c18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b09b      	sub	sp, #108	; 0x6c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d101      	bne.n	8000c3a <HAL_ADC_ConfigChannel+0x22>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e2a4      	b.n	8001184 <HAL_ADC_ConfigChannel+0x56c>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f040 8288 	bne.w	8001162 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d81c      	bhi.n	8000c94 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	231f      	movs	r3, #31
 8000c70:	4093      	lsls	r3, r2
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4019      	ands	r1, r3
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa00 f203 	lsl.w	r2, r0, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	631a      	str	r2, [r3, #48]	; 0x30
 8000c92:	e063      	b.n	8000d5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b09      	cmp	r3, #9
 8000c9a:	d81e      	bhi.n	8000cda <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	3b1e      	subs	r3, #30
 8000cb0:	221f      	movs	r2, #31
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	4019      	ands	r1, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	3b1e      	subs	r3, #30
 8000ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd8:	e040      	b.n	8000d5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b0e      	cmp	r3, #14
 8000ce0:	d81e      	bhi.n	8000d20 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	3b3c      	subs	r3, #60	; 0x3c
 8000cf6:	221f      	movs	r2, #31
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4019      	ands	r1, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	3b3c      	subs	r3, #60	; 0x3c
 8000d12:	fa00 f203 	lsl.w	r2, r0, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d1e:	e01d      	b.n	8000d5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	3b5a      	subs	r3, #90	; 0x5a
 8000d34:	221f      	movs	r2, #31
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	4019      	ands	r1, r3
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	4613      	mov	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	3b5a      	subs	r3, #90	; 0x5a
 8000d50:	fa00 f203 	lsl.w	r2, r0, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 80e5 	bne.w	8000f36 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b09      	cmp	r3, #9
 8000d72:	d91c      	bls.n	8000dae <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6999      	ldr	r1, [r3, #24]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	3b1e      	subs	r3, #30
 8000d86:	2207      	movs	r2, #7
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4019      	ands	r1, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	6898      	ldr	r0, [r3, #8]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3b1e      	subs	r3, #30
 8000da0:	fa00 f203 	lsl.w	r2, r0, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	619a      	str	r2, [r3, #24]
 8000dac:	e019      	b.n	8000de2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6959      	ldr	r1, [r3, #20]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4019      	ands	r1, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	6898      	ldr	r0, [r3, #8]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d84f      	bhi.n	8000ea4 <HAL_ADC_ConfigChannel+0x28c>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <HAL_ADC_ConfigChannel+0x1f4>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000e3f 	.word	0x08000e3f
 8000e14:	08000e61 	.word	0x08000e61
 8000e18:	08000e83 	.word	0x08000e83
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e22:	4b94      	ldr	r3, [pc, #592]	; (8001074 <HAL_ADC_ConfigChannel+0x45c>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	0691      	lsls	r1, r2, #26
 8000e2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e3a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e3c:	e07e      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e44:	4b8b      	ldr	r3, [pc, #556]	; (8001074 <HAL_ADC_ConfigChannel+0x45c>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	0691      	lsls	r1, r2, #26
 8000e4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e50:	430a      	orrs	r2, r1
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e5c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e5e:	e06d      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000e66:	4b83      	ldr	r3, [pc, #524]	; (8001074 <HAL_ADC_ConfigChannel+0x45c>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	0691      	lsls	r1, r2, #26
 8000e70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e72:	430a      	orrs	r2, r1
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e7e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e80:	e05c      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000e88:	4b7a      	ldr	r3, [pc, #488]	; (8001074 <HAL_ADC_ConfigChannel+0x45c>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	0691      	lsls	r1, r2, #26
 8000e92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e94:	430a      	orrs	r2, r1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ea0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ea2:	e04b      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	069b      	lsls	r3, r3, #26
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d107      	bne.n	8000ec8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ec6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000ece:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	069b      	lsls	r3, r3, #26
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d107      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000eea:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	069b      	lsls	r3, r3, #26
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d107      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f0e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	069b      	lsls	r3, r3, #26
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d10a      	bne.n	8000f3a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f32:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000f34:	e001      	b.n	8000f3a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000f36:	bf00      	nop
 8000f38:	e000      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x324>
      break;
 8000f3a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d108      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x344>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x344>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_ADC_ConfigChannel+0x346>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 810a 	bne.w	8001178 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d00f      	beq.n	8000f8c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	400a      	ands	r2, r1
 8000f86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000f8a:	e049      	b.n	8001020 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b09      	cmp	r3, #9
 8000fac:	d91c      	bls.n	8000fe8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6999      	ldr	r1, [r3, #24]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3b1b      	subs	r3, #27
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	4019      	ands	r1, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	6898      	ldr	r0, [r3, #8]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b1b      	subs	r3, #27
 8000fda:	fa00 f203 	lsl.w	r2, r0, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	619a      	str	r2, [r3, #24]
 8000fe6:	e01b      	b.n	8001020 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6959      	ldr	r1, [r3, #20]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	4019      	ands	r1, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	6898      	ldr	r0, [r3, #8]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	fa00 f203 	lsl.w	r2, r0, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_ADC_ConfigChannel+0x460>)
 8001022:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b10      	cmp	r3, #16
 800102a:	d105      	bne.n	8001038 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800102c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001034:	2b00      	cmp	r3, #0
 8001036:	d015      	beq.n	8001064 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800103c:	2b11      	cmp	r3, #17
 800103e:	d105      	bne.n	800104c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00b      	beq.n	8001064 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001050:	2b12      	cmp	r3, #18
 8001052:	f040 8091 	bne.w	8001178 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 808a 	bne.w	8001178 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800106c:	d108      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x468>
 800106e:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_ADC_ConfigChannel+0x464>)
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e008      	b.n	8001086 <HAL_ADC_ConfigChannel+0x46e>
 8001074:	83fff000 	.word	0x83fff000
 8001078:	50000300 	.word	0x50000300
 800107c:	50000100 	.word	0x50000100
 8001080:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001084:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b01      	cmp	r3, #1
 8001092:	d108      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x48e>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x48e>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x490>
 80010a6:	2300      	movs	r3, #0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d150      	bne.n	800114e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010ac:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d010      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d107      	bne.n	80010ce <HAL_ADC_ConfigChannel+0x4b6>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_ConfigChannel+0x4b6>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x4b8>
 80010ce:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d13c      	bne.n	800114e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b10      	cmp	r3, #16
 80010da:	d11d      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x500>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e4:	d118      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80010e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010f0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010f2:	4b27      	ldr	r3, [pc, #156]	; (8001190 <HAL_ADC_ConfigChannel+0x578>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a27      	ldr	r2, [pc, #156]	; (8001194 <HAL_ADC_ConfigChannel+0x57c>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	0c9a      	lsrs	r2, r3, #18
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001108:	e002      	b.n	8001110 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	3b01      	subs	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f9      	bne.n	800110a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001116:	e02e      	b.n	8001176 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b11      	cmp	r3, #17
 800111e:	d10b      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x520>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001128:	d106      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800112a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001134:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001136:	e01e      	b.n	8001176 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b12      	cmp	r3, #18
 800113e:	d11a      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800114a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800114c:	e013      	b.n	8001176 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f043 0220 	orr.w	r2, r3, #32
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001160:	e00a      	b.n	8001178 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f043 0220 	orr.w	r2, r3, #32
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001174:	e000      	b.n	8001178 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001176:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001180:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001184:	4618      	mov	r0, r3
 8001186:	376c      	adds	r7, #108	; 0x6c
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20000000 	.word	0x20000000
 8001194:	431bde83 	.word	0x431bde83

08001198 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001198:	b480      	push	{r7}
 800119a:	b099      	sub	sp, #100	; 0x64
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011b0:	d102      	bne.n	80011b8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80011b2:	4b5a      	ldr	r3, [pc, #360]	; (800131c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	e002      	b.n	80011be <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80011b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011bc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0a2      	b.n	800130e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e09b      	b.n	800130e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d17f      	bne.n	80012ec <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d179      	bne.n	80012ec <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011f8:	4b49      	ldr	r3, [pc, #292]	; (8001320 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80011fa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d040      	beq.n	8001286 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001204:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001216:	035b      	lsls	r3, r3, #13
 8001218:	430b      	orrs	r3, r1
 800121a:	431a      	orrs	r2, r3
 800121c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800121e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d108      	bne.n	8001240 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001240:	2300      	movs	r3, #0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d15c      	bne.n	8001300 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001262:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001264:	2b00      	cmp	r3, #0
 8001266:	d14b      	bne.n	8001300 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001270:	f023 030f 	bic.w	r3, r3, #15
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	6811      	ldr	r1, [r2, #0]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	6892      	ldr	r2, [r2, #8]
 800127c:	430a      	orrs	r2, r1
 800127e:	431a      	orrs	r2, r3
 8001280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001282:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001284:	e03c      	b.n	8001300 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800128e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001290:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80012b2:	2300      	movs	r3, #0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d123      	bne.n	8001300 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d107      	bne.n	80012d4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80012d4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d112      	bne.n	8001300 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80012da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80012e2:	f023 030f 	bic.w	r3, r3, #15
 80012e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012e8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80012ea:	e009      	b.n	8001300 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f043 0220 	orr.w	r2, r3, #32
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80012fe:	e000      	b.n	8001302 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001300:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800130a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800130e:	4618      	mov	r0, r3
 8001310:	3764      	adds	r7, #100	; 0x64
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	50000100 	.word	0x50000100
 8001320:	50000300 	.word	0x50000300

08001324 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800133a:	2b00      	cmp	r3, #0
 800133c:	d126      	bne.n	800138c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001354:	2b00      	cmp	r3, #0
 8001356:	d115      	bne.n	8001384 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f7ff f85b 	bl	8000440 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800138a:	e004      	b.n	8001396 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f7ff f839 	bl	8000424 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f043 0204 	orr.w	r2, r3, #4
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff f9a3 	bl	800072c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d108      	bne.n	800141c <ADC_Enable+0x2c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <ADC_Enable+0x2c>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <ADC_Enable+0x2e>
 800141c:	2300      	movs	r3, #0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d143      	bne.n	80014aa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <ADC_Enable+0xc4>)
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00d      	beq.n	800144c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f043 0210 	orr.w	r2, r3, #16
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e02f      	b.n	80014ac <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800145c:	f7ff f95a 	bl	8000714 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001462:	e01b      	b.n	800149c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001464:	f7ff f956 	bl	8000714 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d914      	bls.n	800149c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b01      	cmp	r3, #1
 800147e:	d00d      	beq.n	800149c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f043 0210 	orr.w	r2, r3, #16
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	f043 0201 	orr.w	r2, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e007      	b.n	80014ac <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d1dc      	bne.n	8001464 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	8000003f 	.word	0x8000003f

080014b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d108      	bne.n	80014e4 <ADC_Disable+0x2c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <ADC_Disable+0x2c>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <ADC_Disable+0x2e>
 80014e4:	2300      	movs	r3, #0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d047      	beq.n	800157a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 030d 	and.w	r3, r3, #13
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10f      	bne.n	8001518 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0202 	orr.w	r2, r2, #2
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2203      	movs	r2, #3
 800150e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001510:	f7ff f900 	bl	8000714 <HAL_GetTick>
 8001514:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001516:	e029      	b.n	800156c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f043 0210 	orr.w	r2, r3, #16
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f043 0201 	orr.w	r2, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e023      	b.n	800157c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001534:	f7ff f8ee 	bl	8000714 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d914      	bls.n	800156c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	d10d      	bne.n	800156c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f043 0210 	orr.w	r2, r3, #16
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f043 0201 	orr.w	r2, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e007      	b.n	800157c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b01      	cmp	r3, #1
 8001578:	d0dc      	beq.n	8001534 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff29 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff3e 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff31 	bl	80015e8 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e037      	b.n	800182c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f940 	bl	8001a94 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}  
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_DMA_Start_IT+0x20>
 8001850:	2302      	movs	r3, #2
 8001852:	e04a      	b.n	80018ea <HAL_DMA_Start_IT+0xb6>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001862:	2b01      	cmp	r3, #1
 8001864:	d13a      	bne.n	80018dc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2202      	movs	r2, #2
 800186a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f8d4 	bl	8001a38 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 020e 	orr.w	r2, r2, #14
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e00f      	b.n	80018ca <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 020a 	orr.w	r2, r2, #10
 80018b8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0204 	bic.w	r2, r2, #4
 80018c8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0201 	orr.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e005      	b.n	80018e8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80018e4:	2302      	movs	r3, #2
 80018e6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	2204      	movs	r2, #4
 8001910:	409a      	lsls	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d024      	beq.n	8001964 <HAL_DMA_IRQHandler+0x72>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01f      	beq.n	8001964 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b00      	cmp	r3, #0
 8001930:	d107      	bne.n	8001942 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0204 	bic.w	r2, r2, #4
 8001940:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194a:	2104      	movs	r1, #4
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	2b00      	cmp	r3, #0
 8001958:	d06a      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001962:	e065      	b.n	8001a30 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2202      	movs	r2, #2
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02c      	beq.n	80019ce <HAL_DMA_IRQHandler+0xdc>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d027      	beq.n	80019ce <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10b      	bne.n	80019a4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 020a 	bic.w	r2, r2, #10
 800199a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	2102      	movs	r1, #2
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d035      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80019cc:	e030      	b.n	8001a30 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2208      	movs	r2, #8
 80019d4:	409a      	lsls	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d028      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x13e>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d023      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 020e 	bic.w	r2, r2, #14
 80019f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a00:	2101      	movs	r1, #1
 8001a02:	fa01 f202 	lsl.w	r2, r1, r2
 8001a06:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	4798      	blx	r3
    }
  }
}  
 8001a2e:	e7ff      	b.n	8001a30 <HAL_DMA_IRQHandler+0x13e>
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d108      	bne.n	8001a78 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a76:	e007      	b.n	8001a88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <DMA_CalcBaseAndBitshift+0x34>)
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <DMA_CalcBaseAndBitshift+0x38>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	009a      	lsls	r2, r3, #2
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <DMA_CalcBaseAndBitshift+0x3c>)
 8001ab8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	bffdfff8 	.word	0xbffdfff8
 8001acc:	cccccccd 	.word	0xcccccccd
 8001ad0:	40020000 	.word	0x40020000

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae2:	e14e      	b.n	8001d82 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	4013      	ands	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8140 	beq.w	8001d7c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d005      	beq.n	8001b14 <HAL_GPIO_Init+0x40>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d130      	bne.n	8001b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	f003 0201 	and.w	r2, r3, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d017      	beq.n	8001bb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d123      	bne.n	8001c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	08da      	lsrs	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3208      	adds	r2, #8
 8001c00:	6939      	ldr	r1, [r7, #16]
 8001c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0203 	and.w	r2, r3, #3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 809a 	beq.w	8001d7c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c48:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <HAL_GPIO_Init+0x2cc>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a54      	ldr	r2, [pc, #336]	; (8001da0 <HAL_GPIO_Init+0x2cc>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <HAL_GPIO_Init+0x2cc>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c60:	4a50      	ldr	r2, [pc, #320]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c8a:	d013      	beq.n	8001cb4 <HAL_GPIO_Init+0x1e0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a46      	ldr	r2, [pc, #280]	; (8001da8 <HAL_GPIO_Init+0x2d4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00d      	beq.n	8001cb0 <HAL_GPIO_Init+0x1dc>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a45      	ldr	r2, [pc, #276]	; (8001dac <HAL_GPIO_Init+0x2d8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x1d8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a44      	ldr	r2, [pc, #272]	; (8001db0 <HAL_GPIO_Init+0x2dc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_GPIO_Init+0x1d4>
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e006      	b.n	8001cb6 <HAL_GPIO_Init+0x1e2>
 8001ca8:	2305      	movs	r3, #5
 8001caa:	e004      	b.n	8001cb6 <HAL_GPIO_Init+0x1e2>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e002      	b.n	8001cb6 <HAL_GPIO_Init+0x1e2>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_GPIO_Init+0x1e2>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cc6:	4937      	ldr	r1, [pc, #220]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd4:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_GPIO_Init+0x2e0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cf8:	4a2e      	ldr	r2, [pc, #184]	; (8001db4 <HAL_GPIO_Init+0x2e0>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_GPIO_Init+0x2e0>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d22:	4a24      	ldr	r2, [pc, #144]	; (8001db4 <HAL_GPIO_Init+0x2e0>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <HAL_GPIO_Init+0x2e0>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_GPIO_Init+0x2e0>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_GPIO_Init+0x2e0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d76:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <HAL_GPIO_Init+0x2e0>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f47f aea9 	bne.w	8001ae4 <HAL_GPIO_Init+0x10>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	48000400 	.word	0x48000400
 8001dac:	48000800 	.word	0x48000800
 8001db0:	48000c00 	.word	0x48000c00
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f001 b823 	b.w	8002e54 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 817d 	beq.w	800211e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e24:	4bbc      	ldr	r3, [pc, #752]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d00c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e30:	4bb9      	ldr	r3, [pc, #740]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d15c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x10e>
 8001e3c:	4bb6      	ldr	r3, [pc, #728]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d155      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x10e>
 8001e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0x94>
 8001e76:	4ba8      	ldr	r3, [pc, #672]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e015      	b.n	8001ea8 <HAL_RCC_OscConfig+0xc0>
 8001e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e80:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e94:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e98:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ea4:	4b9c      	ldr	r3, [pc, #624]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001eb0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001eb4:	fa92 f2a2 	rbit	r2, r2
 8001eb8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ebc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 811f 	beq.w	800211c <HAL_RCC_OscConfig+0x334>
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 8116 	bne.w	800211c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f000 bfaf 	b.w	8002e54 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x12e>
 8001f08:	4b83      	ldr	r3, [pc, #524]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a82      	ldr	r2, [pc, #520]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e036      	b.n	8001f84 <HAL_RCC_OscConfig+0x19c>
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x158>
 8001f26:	4b7c      	ldr	r3, [pc, #496]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a7b      	ldr	r2, [pc, #492]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b79      	ldr	r3, [pc, #484]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a78      	ldr	r2, [pc, #480]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e021      	b.n	8001f84 <HAL_RCC_OscConfig+0x19c>
 8001f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x184>
 8001f52:	4b71      	ldr	r3, [pc, #452]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a70      	ldr	r2, [pc, #448]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6d      	ldr	r2, [pc, #436]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0x19c>
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a69      	ldr	r2, [pc, #420]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b67      	ldr	r3, [pc, #412]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a66      	ldr	r2, [pc, #408]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f82:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f84:	4b64      	ldr	r3, [pc, #400]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	f023 020f 	bic.w	r2, r3, #15
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	495f      	ldr	r1, [pc, #380]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d059      	beq.n	8002062 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7fe fbb1 	bl	8000714 <HAL_GetTick>
 8001fb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7fe fbac 	bl	8000714 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b64      	cmp	r3, #100	; 0x64
 8001fc6:	d902      	bls.n	8001fce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	f000 bf43 	b.w	8002e54 <HAL_RCC_OscConfig+0x106c>
 8001fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001fe2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_OscConfig+0x218>
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e015      	b.n	800202c <HAL_RCC_OscConfig+0x244>
 8002000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002004:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002018:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800201c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002028:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002030:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002034:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002038:	fa92 f2a2 	rbit	r2, r2
 800203c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002040:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002044:	fab2 f282 	clz	r2, r2
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f042 0220 	orr.w	r2, r2, #32
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f002 021f 	and.w	r2, r2, #31
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ab      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x1d0>
 8002060:	e05d      	b.n	800211e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe fb57 	bl	8000714 <HAL_GetTick>
 8002066:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206c:	f7fe fb52 	bl	8000714 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b64      	cmp	r3, #100	; 0x64
 800207a:	d902      	bls.n	8002082 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	f000 bee9 	b.w	8002e54 <HAL_RCC_OscConfig+0x106c>
 8002082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002086:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002096:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2cc>
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	e015      	b.n	80020e0 <HAL_RCC_OscConfig+0x2f8>
 80020b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_RCC_OscConfig+0x330>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020e4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80020e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80020f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f042 0220 	orr.w	r2, r2, #32
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f002 021f 	and.w	r2, r2, #31
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ab      	bne.n	800206c <HAL_RCC_OscConfig+0x284>
 8002114:	e003      	b.n	800211e <HAL_RCC_OscConfig+0x336>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 817d 	beq.w	800242e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002134:	4ba6      	ldr	r3, [pc, #664]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002140:	4ba3      	ldr	r3, [pc, #652]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d172      	bne.n	8002232 <HAL_RCC_OscConfig+0x44a>
 800214c:	4ba0      	ldr	r3, [pc, #640]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d16c      	bne.n	8002232 <HAL_RCC_OscConfig+0x44a>
 8002158:	2302      	movs	r3, #2
 800215a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800216a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	095b      	lsrs	r3, r3, #5
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_RCC_OscConfig+0x3a0>
 8002182:	4b93      	ldr	r3, [pc, #588]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	e013      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c8>
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800219a:	2302      	movs	r3, #2
 800219c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80021a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80021ac:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2202      	movs	r2, #2
 80021b2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80021b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80021ba:	fa92 f2a2 	rbit	r2, r2
 80021be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80021c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f042 0220 	orr.w	r2, r2, #32
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f002 021f 	and.w	r2, r2, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCC_OscConfig+0x410>
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d002      	beq.n	80021f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f000 be2e 	b.w	8002e54 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f8:	4b75      	ldr	r3, [pc, #468]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	21f8      	movs	r1, #248	; 0xf8
 800220e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002216:	fa91 f1a1 	rbit	r1, r1
 800221a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800221e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002222:	fab1 f181 	clz	r1, r1
 8002226:	b2c9      	uxtb	r1, r1
 8002228:	408b      	lsls	r3, r1
 800222a:	4969      	ldr	r1, [pc, #420]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002230:	e0fd      	b.n	800242e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8088 	beq.w	8002354 <HAL_RCC_OscConfig+0x56c>
 8002244:	2301      	movs	r3, #1
 8002246:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002256:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002264:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	461a      	mov	r2, r3
 800226c:	2301      	movs	r3, #1
 800226e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe fa50 	bl	8000714 <HAL_GetTick>
 8002274:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe fa4b 	bl	8000714 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d902      	bls.n	8002290 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	f000 bde2 	b.w	8002e54 <HAL_RCC_OscConfig+0x106c>
 8002290:	2302      	movs	r3, #2
 8002292:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80022a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4d8>
 80022ba:	4b45      	ldr	r3, [pc, #276]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	e013      	b.n	80022e8 <HAL_RCC_OscConfig+0x500>
 80022c0:	2302      	movs	r3, #2
 80022c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80022e4:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2202      	movs	r2, #2
 80022ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80022ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022f2:	fa92 f2a2 	rbit	r2, r2
 80022f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80022fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80022fe:	fab2 f282 	clz	r2, r2
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f042 0220 	orr.w	r2, r2, #32
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	f002 021f 	and.w	r2, r2, #31
 800230e:	2101      	movs	r1, #1
 8002310:	fa01 f202 	lsl.w	r2, r1, r2
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0af      	beq.n	800227a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	21f8      	movs	r1, #248	; 0xf8
 8002330:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002338:	fa91 f1a1 	rbit	r1, r1
 800233c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002340:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002344:	fab1 f181 	clz	r1, r1
 8002348:	b2c9      	uxtb	r1, r1
 800234a:	408b      	lsls	r3, r1
 800234c:	4920      	ldr	r1, [pc, #128]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
 8002352:	e06c      	b.n	800242e <HAL_RCC_OscConfig+0x646>
 8002354:	2301      	movs	r3, #1
 8002356:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002366:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002374:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	461a      	mov	r2, r3
 800237c:	2300      	movs	r3, #0
 800237e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe f9c8 	bl	8000714 <HAL_GetTick>
 8002384:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238a:	f7fe f9c3 	bl	8000714 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d902      	bls.n	80023a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	f000 bd5a 	b.w	8002e54 <HAL_RCC_OscConfig+0x106c>
 80023a0:	2302      	movs	r3, #2
 80023a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80023b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d104      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5ec>
 80023ca:	4b01      	ldr	r3, [pc, #4]	; (80023d0 <HAL_RCC_OscConfig+0x5e8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e015      	b.n	80023fc <HAL_RCC_OscConfig+0x614>
 80023d0:	40021000 	.word	0x40021000
 80023d4:	2302      	movs	r3, #2
 80023d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80023f8:	4bc8      	ldr	r3, [pc, #800]	; (800271c <HAL_RCC_OscConfig+0x934>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	2202      	movs	r2, #2
 80023fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002402:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002406:	fa92 f2a2 	rbit	r2, r2
 800240a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800240e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002412:	fab2 f282 	clz	r2, r2
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	f042 0220 	orr.w	r2, r2, #32
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	f002 021f 	and.w	r2, r2, #31
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f202 	lsl.w	r2, r1, r2
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ad      	bne.n	800238a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8110 	beq.w	8002664 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d079      	beq.n	8002548 <HAL_RCC_OscConfig+0x760>
 8002454:	2301      	movs	r3, #1
 8002456:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	4bab      	ldr	r3, [pc, #684]	; (8002720 <HAL_RCC_OscConfig+0x938>)
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	461a      	mov	r2, r3
 800247a:	2301      	movs	r3, #1
 800247c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe f949 	bl	8000714 <HAL_GetTick>
 8002482:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe f944 	bl	8000714 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d902      	bls.n	800249e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	f000 bcdb 	b.w	8002e54 <HAL_RCC_OscConfig+0x106c>
 800249e:	2302      	movs	r3, #2
 80024a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80024b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024b8:	2202      	movs	r2, #2
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	fa93 f2a3 	rbit	r2, r3
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024dc:	2202      	movs	r2, #2
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f8:	4b88      	ldr	r3, [pc, #544]	; (800271c <HAL_RCC_OscConfig+0x934>)
 80024fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002504:	2102      	movs	r1, #2
 8002506:	6019      	str	r1, [r3, #0]
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	fa93 f1a3 	rbit	r1, r3
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800251e:	6019      	str	r1, [r3, #0]
  return result;
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0a0      	beq.n	8002488 <HAL_RCC_OscConfig+0x6a0>
 8002546:	e08d      	b.n	8002664 <HAL_RCC_OscConfig+0x87c>
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fa93 f2a3 	rbit	r2, r3
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800256a:	601a      	str	r2, [r3, #0]
  return result;
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002574:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4b68      	ldr	r3, [pc, #416]	; (8002720 <HAL_RCC_OscConfig+0x938>)
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	461a      	mov	r2, r3
 8002586:	2300      	movs	r3, #0
 8002588:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe f8c3 	bl	8000714 <HAL_GetTick>
 800258e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002594:	f7fe f8be 	bl	8000714 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d902      	bls.n	80025aa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	f000 bc55 	b.w	8002e54 <HAL_RCC_OscConfig+0x106c>
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025b2:	2202      	movs	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025d6:	2202      	movs	r2, #2
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002614:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002616:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_RCC_OscConfig+0x934>)
 8002618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002622:	2102      	movs	r1, #2
 8002624:	6019      	str	r1, [r3, #0]
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	fa93 f1a3 	rbit	r1, r3
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800263c:	6019      	str	r1, [r3, #0]
  return result;
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d197      	bne.n	8002594 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 81a1 	beq.w	80029bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <HAL_RCC_OscConfig+0x934>)
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d116      	bne.n	80026ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_RCC_OscConfig+0x934>)
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	4a22      	ldr	r2, [pc, #136]	; (800271c <HAL_RCC_OscConfig+0x934>)
 8002692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002696:	61d3      	str	r3, [r2, #28]
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_RCC_OscConfig+0x934>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80026b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <HAL_RCC_OscConfig+0x93c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11a      	bne.n	80026fc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <HAL_RCC_OscConfig+0x93c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_RCC_OscConfig+0x93c>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe f81f 	bl	8000714 <HAL_GetTick>
 80026d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	e009      	b.n	80026f0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe f81a 	bl	8000714 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	; 0x64
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e3b1      	b.n	8002e54 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_RCC_OscConfig+0x93c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10d      	bne.n	8002728 <HAL_RCC_OscConfig+0x940>
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_OscConfig+0x934>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a02      	ldr	r2, [pc, #8]	; (800271c <HAL_RCC_OscConfig+0x934>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	e03c      	b.n	8002794 <HAL_RCC_OscConfig+0x9ac>
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	10908120 	.word	0x10908120
 8002724:	40007000 	.word	0x40007000
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10c      	bne.n	8002752 <HAL_RCC_OscConfig+0x96a>
 8002738:	4bc1      	ldr	r3, [pc, #772]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4ac0      	ldr	r2, [pc, #768]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	4bbe      	ldr	r3, [pc, #760]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4abd      	ldr	r2, [pc, #756]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 800274a:	f023 0304 	bic.w	r3, r3, #4
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e020      	b.n	8002794 <HAL_RCC_OscConfig+0x9ac>
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x994>
 8002762:	4bb7      	ldr	r3, [pc, #732]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4ab6      	ldr	r2, [pc, #728]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6213      	str	r3, [r2, #32]
 800276e:	4bb4      	ldr	r3, [pc, #720]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4ab3      	ldr	r2, [pc, #716]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0x9ac>
 800277c:	4bb0      	ldr	r3, [pc, #704]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4aaf      	ldr	r2, [pc, #700]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	4bad      	ldr	r3, [pc, #692]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4aac      	ldr	r2, [pc, #688]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8081 	beq.w	80028a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7fd ffb5 	bl	8000714 <HAL_GetTick>
 80027aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fd ffb0 	bl	8000714 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e345      	b.n	8002e54 <HAL_RCC_OscConfig+0x106c>
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027d0:	2202      	movs	r2, #2
 80027d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	fa93 f2a3 	rbit	r2, r3
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027f4:	2202      	movs	r2, #2
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800280e:	601a      	str	r2, [r3, #0]
  return result;
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002818:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d102      	bne.n	8002834 <HAL_RCC_OscConfig+0xa4c>
 800282e:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	e013      	b.n	800285c <HAL_RCC_OscConfig+0xa74>
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800283c:	2202      	movs	r2, #2
 800283e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f2a3 	rbit	r2, r3
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	4b79      	ldr	r3, [pc, #484]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002860:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002864:	2102      	movs	r1, #2
 8002866:	6011      	str	r1, [r2, #0]
 8002868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	fa92 f1a2 	rbit	r1, r2
 8002876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800287e:	6011      	str	r1, [r2, #0]
  return result;
 8002880:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002884:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	fab2 f282 	clz	r2, r2
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f002 021f 	and.w	r2, r2, #31
 800289a:	2101      	movs	r1, #1
 800289c:	fa01 f202 	lsl.w	r2, r1, r2
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d084      	beq.n	80027b0 <HAL_RCC_OscConfig+0x9c8>
 80028a6:	e07f      	b.n	80029a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7fd ff34 	bl	8000714 <HAL_GetTick>
 80028ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	e00b      	b.n	80028ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fd ff2f 	bl	8000714 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e2c4      	b.n	8002e54 <HAL_RCC_OscConfig+0x106c>
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80028d2:	2202      	movs	r2, #2
 80028d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fa93 f2a3 	rbit	r2, r3
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028f6:	2202      	movs	r2, #2
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fa93 f2a3 	rbit	r2, r3
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002910:	601a      	str	r2, [r3, #0]
  return result;
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800291a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d102      	bne.n	8002936 <HAL_RCC_OscConfig+0xb4e>
 8002930:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	e013      	b.n	800295e <HAL_RCC_OscConfig+0xb76>
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800293e:	2202      	movs	r2, #2
 8002940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002962:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002966:	2102      	movs	r1, #2
 8002968:	6011      	str	r1, [r2, #0]
 800296a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800296e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	fa92 f1a2 	rbit	r1, r2
 8002978:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800297c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002980:	6011      	str	r1, [r2, #0]
  return result;
 8002982:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002986:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	fab2 f282 	clz	r2, r2
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f002 021f 	and.w	r2, r2, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d184      	bne.n	80028b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d105      	bne.n	80029bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b0:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8242 	beq.w	8002e52 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ce:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <HAL_RCC_OscConfig+0xc58>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	f000 8213 	beq.w	8002e02 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	f040 8162 	bne.w	8002cb2 <HAL_RCC_OscConfig+0xeca>
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f2a3 	rbit	r2, r3
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a12:	601a      	str	r2, [r3, #0]
  return result;
 8002a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a18:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2300      	movs	r3, #0
 8002a32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fd fe6e 	bl	8000714 <HAL_GetTick>
 8002a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3c:	e00c      	b.n	8002a58 <HAL_RCC_OscConfig+0xc70>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fd fe66 	bl	8000714 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1fd      	b.n	8002e54 <HAL_RCC_OscConfig+0x106c>
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a7c:	601a      	str	r2, [r3, #0]
  return result;
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d102      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xcba>
 8002a9c:	4bb0      	ldr	r3, [pc, #704]	; (8002d60 <HAL_RCC_OscConfig+0xf78>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	e027      	b.n	8002af2 <HAL_RCC_OscConfig+0xd0a>
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002aaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	fa93 f2a3 	rbit	r2, r3
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ad0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f2a3 	rbit	r2, r3
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	4b9c      	ldr	r3, [pc, #624]	; (8002d60 <HAL_RCC_OscConfig+0xf78>)
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002af6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002afa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002afe:	6011      	str	r1, [r2, #0]
 8002b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b04:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	fa92 f1a2 	rbit	r1, r2
 8002b0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b16:	6011      	str	r1, [r2, #0]
  return result;
 8002b18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b1c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	fab2 f282 	clz	r2, r2
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f042 0220 	orr.w	r2, r2, #32
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	f002 021f 	and.w	r2, r2, #31
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d182      	bne.n	8002a44 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3e:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCC_OscConfig+0xf78>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	497f      	ldr	r1, [pc, #508]	; (8002d60 <HAL_RCC_OscConfig+0xf78>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	fa93 f2a3 	rbit	r2, r3
 8002b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b86:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b8a:	601a      	str	r2, [r3, #0]
  return result;
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b94:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ba0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2301      	movs	r3, #1
 8002baa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fd fdb2 	bl	8000714 <HAL_GetTick>
 8002bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb4:	e009      	b.n	8002bca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fd fdad 	bl	8000714 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e144      	b.n	8002e54 <HAL_RCC_OscConfig+0x106c>
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002bee:	601a      	str	r2, [r3, #0]
  return result;
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002bf8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d102      	bne.n	8002c14 <HAL_RCC_OscConfig+0xe2c>
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <HAL_RCC_OscConfig+0xf78>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	e027      	b.n	8002c64 <HAL_RCC_OscConfig+0xe7c>
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	fa93 f2a3 	rbit	r2, r3
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	fa93 f2a3 	rbit	r2, r3
 8002c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_OscConfig+0xf78>)
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c68:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c70:	6011      	str	r1, [r2, #0]
 8002c72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c76:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	fa92 f1a2 	rbit	r1, r2
 8002c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c84:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c88:	6011      	str	r1, [r2, #0]
  return result;
 8002c8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	fab2 f282 	clz	r2, r2
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f042 0220 	orr.w	r2, r2, #32
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f002 021f 	and.w	r2, r2, #31
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d082      	beq.n	8002bb6 <HAL_RCC_OscConfig+0xdce>
 8002cb0:	e0cf      	b.n	8002e52 <HAL_RCC_OscConfig+0x106a>
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002cba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cd6:	601a      	str	r2, [r3, #0]
  return result;
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ce0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fd fd0c 	bl	8000714 <HAL_GetTick>
 8002cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d00:	e009      	b.n	8002d16 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fd fd07 	bl	8000714 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e09e      	b.n	8002e54 <HAL_RCC_OscConfig+0x106c>
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	fa93 f2a3 	rbit	r2, r3
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d3a:	601a      	str	r2, [r3, #0]
  return result;
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d104      	bne.n	8002d64 <HAL_RCC_OscConfig+0xf7c>
 8002d5a:	4b01      	ldr	r3, [pc, #4]	; (8002d60 <HAL_RCC_OscConfig+0xf78>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e029      	b.n	8002db4 <HAL_RCC_OscConfig+0xfcc>
 8002d60:	40021000 	.word	0x40021000
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	fa93 f2a3 	rbit	r2, r3
 8002d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d84:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x1078>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002dbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dc0:	6011      	str	r1, [r2, #0]
 8002dc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	fa92 f1a2 	rbit	r1, r2
 8002dd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002dd8:	6011      	str	r1, [r2, #0]
  return result;
 8002dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dde:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	fab2 f282 	clz	r2, r2
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f042 0220 	orr.w	r2, r2, #32
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f002 021f 	and.w	r2, r2, #31
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d180      	bne.n	8002d02 <HAL_RCC_OscConfig+0xf1a>
 8002e00:	e027      	b.n	8002e52 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e01e      	b.n	8002e54 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_OscConfig+0x1078>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d10b      	bne.n	8002e4e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000

08002e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b09e      	sub	sp, #120	; 0x78
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e162      	b.n	8003142 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b90      	ldr	r3, [pc, #576]	; (80030c0 <HAL_RCC_ClockConfig+0x25c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d910      	bls.n	8002eac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b8d      	ldr	r3, [pc, #564]	; (80030c0 <HAL_RCC_ClockConfig+0x25c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 0207 	bic.w	r2, r3, #7
 8002e92:	498b      	ldr	r1, [pc, #556]	; (80030c0 <HAL_RCC_ClockConfig+0x25c>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b89      	ldr	r3, [pc, #548]	; (80030c0 <HAL_RCC_ClockConfig+0x25c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e14a      	b.n	8003142 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb8:	4b82      	ldr	r3, [pc, #520]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	497f      	ldr	r1, [pc, #508]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80dc 	beq.w	8003090 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d13c      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xf6>
 8002ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xa6>
 8002f04:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	e00f      	b.n	8002f2a <HAL_RCC_ClockConfig+0xc6>
 8002f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	667b      	str	r3, [r7, #100]	; 0x64
 8002f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f26:	4b67      	ldr	r3, [pc, #412]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f32:	fa92 f2a2 	rbit	r2, r2
 8002f36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f042 0220 	orr.w	r2, r2, #32
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f002 021f 	and.w	r2, r2, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d17b      	bne.n	800304e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0f3      	b.n	8003142 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d13c      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x178>
 8002f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x128>
 8002f86:	4b4f      	ldr	r3, [pc, #316]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	e00f      	b.n	8002fac <HAL_RCC_ClockConfig+0x148>
 8002f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	647b      	str	r3, [r7, #68]	; 0x44
 8002f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8002fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa8:	4b46      	ldr	r3, [pc, #280]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fb4:	fa92 f2a2 	rbit	r2, r2
 8002fb8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fbc:	fab2 f282 	clz	r2, r2
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	f042 0220 	orr.w	r2, r2, #32
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f002 021f 	and.w	r2, r2, #31
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d13a      	bne.n	800304e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0b2      	b.n	8003142 <HAL_RCC_ClockConfig+0x2de>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HAL_RCC_ClockConfig+0x1a0>
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	e00d      	b.n	8003020 <HAL_RCC_ClockConfig+0x1bc>
 8003004:	2302      	movs	r3, #2
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
 8003010:	2302      	movs	r3, #2
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	2202      	movs	r2, #2
 8003022:	61ba      	str	r2, [r7, #24]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	fa92 f2a2 	rbit	r2, r2
 800302a:	617a      	str	r2, [r7, #20]
  return result;
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	fab2 f282 	clz	r2, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f042 0220 	orr.w	r2, r2, #32
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f002 021f 	and.w	r2, r2, #31
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e079      	b.n	8003142 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	491a      	ldr	r1, [pc, #104]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003060:	f7fd fb58 	bl	8000714 <HAL_GetTick>
 8003064:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fd fb54 	bl	8000714 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e061      	b.n	8003142 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_RCC_ClockConfig+0x260>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x25c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d214      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_RCC_ClockConfig+0x25c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	4906      	ldr	r1, [pc, #24]	; (80030c0 <HAL_RCC_ClockConfig+0x25c>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_RCC_ClockConfig+0x25c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e040      	b.n	8003142 <HAL_RCC_ClockConfig+0x2de>
 80030c0:	40022000 	.word	0x40022000
 80030c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_RCC_ClockConfig+0x2e8>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	491a      	ldr	r1, [pc, #104]	; (800314c <HAL_RCC_ClockConfig+0x2e8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f2:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_RCC_ClockConfig+0x2e8>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4912      	ldr	r1, [pc, #72]	; (800314c <HAL_RCC_ClockConfig+0x2e8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003106:	f000 f829 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800310a:	4601      	mov	r1, r0
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_RCC_ClockConfig+0x2e8>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003114:	22f0      	movs	r2, #240	; 0xf0
 8003116:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	fa92 f2a2 	rbit	r2, r2
 800311e:	60fa      	str	r2, [r7, #12]
  return result;
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	fab2 f282 	clz	r2, r2
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	40d3      	lsrs	r3, r2
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x2ec>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	fa21 f303 	lsr.w	r3, r1, r3
 8003132:	4a08      	ldr	r2, [pc, #32]	; (8003154 <HAL_RCC_ClockConfig+0x2f0>)
 8003134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_RCC_ClockConfig+0x2f4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd faa6 	bl	800068c <HAL_InitTick>
  
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3778      	adds	r7, #120	; 0x78
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	0800350c 	.word	0x0800350c
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	b08b      	sub	sp, #44	; 0x2c
 8003160:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003176:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b04      	cmp	r3, #4
 8003184:	d002      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x30>
 8003186:	2b08      	cmp	r3, #8
 8003188:	d003      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0x36>
 800318a:	e03c      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCC_GetSysClockFreq+0xc4>)
 800318e:	623b      	str	r3, [r7, #32]
      break;
 8003190:	e03c      	b.n	800320c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003198:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800319c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	fa92 f2a2 	rbit	r2, r2
 80031a4:	607a      	str	r2, [r7, #4]
  return result;
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	40d3      	lsrs	r3, r2
 80031b0:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <HAL_RCC_GetSysClockFreq+0xc8>)
 80031b2:	5cd3      	ldrb	r3, [r2, r3]
 80031b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_GetSysClockFreq+0xc0>)
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	220f      	movs	r2, #15
 80031c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	fa92 f2a2 	rbit	r2, r2
 80031c8:	60fa      	str	r2, [r7, #12]
  return result;
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	fab2 f282 	clz	r2, r2
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	40d3      	lsrs	r3, r2
 80031d4:	4a14      	ldr	r2, [pc, #80]	; (8003228 <HAL_RCC_GetSysClockFreq+0xcc>)
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031e4:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
 80031f4:	e004      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	4a0c      	ldr	r2, [pc, #48]	; (800322c <HAL_RCC_GetSysClockFreq+0xd0>)
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	623b      	str	r3, [r7, #32]
      break;
 8003204:	e002      	b.n	800320c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003208:	623b      	str	r3, [r7, #32]
      break;
 800320a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320c:	6a3b      	ldr	r3, [r7, #32]
}
 800320e:	4618      	mov	r0, r3
 8003210:	372c      	adds	r7, #44	; 0x2c
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	007a1200 	.word	0x007a1200
 8003224:	0800351c 	.word	0x0800351c
 8003228:	0800352c 	.word	0x0800352c
 800322c:	003d0900 	.word	0x003d0900

08003230 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b092      	sub	sp, #72	; 0x48
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003240:	2300      	movs	r3, #0
 8003242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80cd 	beq.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003254:	4b8e      	ldr	r3, [pc, #568]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10e      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b8b      	ldr	r3, [pc, #556]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	4a8a      	ldr	r2, [pc, #552]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	61d3      	str	r3, [r2, #28]
 800326c:	4b88      	ldr	r3, [pc, #544]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b85      	ldr	r3, [pc, #532]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d118      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328a:	4b82      	ldr	r3, [pc, #520]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a81      	ldr	r2, [pc, #516]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7fd fa3d 	bl	8000714 <HAL_GetTick>
 800329a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	e008      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fd fa39 	bl	8000714 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b64      	cmp	r3, #100	; 0x64
 80032aa:	d901      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e0ea      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	4b78      	ldr	r3, [pc, #480]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032bc:	4b74      	ldr	r3, [pc, #464]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d07d      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d076      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032da:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	461a      	mov	r2, r3
 8003304:	2301      	movs	r3, #1
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800330c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	461a      	mov	r2, r3
 8003328:	2300      	movs	r3, #0
 800332a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800332c:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003330:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d045      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fd f9ea 	bl	8000714 <HAL_GetTick>
 8003340:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003342:	e00a      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003344:	f7fd f9e6 	bl	8000714 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e095      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800335a:	2302      	movs	r3, #2
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
 8003366:	2302      	movs	r3, #2
 8003368:	623b      	str	r3, [r7, #32]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	61fb      	str	r3, [r7, #28]
  return result;
 8003372:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d102      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003388:	4b41      	ldr	r3, [pc, #260]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	e007      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800338e:	2302      	movs	r3, #2
 8003390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2202      	movs	r2, #2
 80033a0:	613a      	str	r2, [r7, #16]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	fa92 f2a2 	rbit	r2, r2
 80033a8:	60fa      	str	r2, [r7, #12]
  return result;
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f002 021f 	and.w	r2, r2, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0bd      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033c8:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	492e      	ldr	r1, [pc, #184]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033fa:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f023 0203 	bic.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	4922      	ldr	r1, [pc, #136]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	4313      	orrs	r3, r2
 800340a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f023 0210 	bic.w	r2, r3, #16
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	491a      	ldr	r1, [pc, #104]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	4313      	orrs	r3, r2
 8003428:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003436:	4b16      	ldr	r3, [pc, #88]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	4913      	ldr	r1, [pc, #76]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	4313      	orrs	r3, r2
 8003446:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	490b      	ldr	r1, [pc, #44]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	4313      	orrs	r3, r2
 8003464:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	4904      	ldr	r1, [pc, #16]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	4313      	orrs	r3, r2
 8003482:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3748      	adds	r7, #72	; 0x48
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	10908100 	.word	0x10908100

0800349c <__libc_init_array>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	4d0d      	ldr	r5, [pc, #52]	; (80034d4 <__libc_init_array+0x38>)
 80034a0:	4c0d      	ldr	r4, [pc, #52]	; (80034d8 <__libc_init_array+0x3c>)
 80034a2:	1b64      	subs	r4, r4, r5
 80034a4:	10a4      	asrs	r4, r4, #2
 80034a6:	2600      	movs	r6, #0
 80034a8:	42a6      	cmp	r6, r4
 80034aa:	d109      	bne.n	80034c0 <__libc_init_array+0x24>
 80034ac:	4d0b      	ldr	r5, [pc, #44]	; (80034dc <__libc_init_array+0x40>)
 80034ae:	4c0c      	ldr	r4, [pc, #48]	; (80034e0 <__libc_init_array+0x44>)
 80034b0:	f000 f820 	bl	80034f4 <_init>
 80034b4:	1b64      	subs	r4, r4, r5
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	2600      	movs	r6, #0
 80034ba:	42a6      	cmp	r6, r4
 80034bc:	d105      	bne.n	80034ca <__libc_init_array+0x2e>
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c4:	4798      	blx	r3
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7ee      	b.n	80034a8 <__libc_init_array+0xc>
 80034ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ce:	4798      	blx	r3
 80034d0:	3601      	adds	r6, #1
 80034d2:	e7f2      	b.n	80034ba <__libc_init_array+0x1e>
 80034d4:	0800353c 	.word	0x0800353c
 80034d8:	0800353c 	.word	0x0800353c
 80034dc:	0800353c 	.word	0x0800353c
 80034e0:	08003540 	.word	0x08003540

080034e4 <memset>:
 80034e4:	4402      	add	r2, r0
 80034e6:	4603      	mov	r3, r0
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d100      	bne.n	80034ee <memset+0xa>
 80034ec:	4770      	bx	lr
 80034ee:	f803 1b01 	strb.w	r1, [r3], #1
 80034f2:	e7f9      	b.n	80034e8 <memset+0x4>

080034f4 <_init>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	bf00      	nop
 80034f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fa:	bc08      	pop	{r3}
 80034fc:	469e      	mov	lr, r3
 80034fe:	4770      	bx	lr

08003500 <_fini>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	bf00      	nop
 8003504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003506:	bc08      	pop	{r3}
 8003508:	469e      	mov	lr, r3
 800350a:	4770      	bx	lr
